////
/// SVG meta and CSS
/// @group svg
////

// Built-in modules
@use 'sass:map';
// This file is generated automatically from the webpack plugin
@use './scss/icons-generated';
@forward './scss/icons-generated';
// Particle tokens
@use '~tokens/sass';

/// Get the sprite names from generated scss in generated file
$svgicons: map.keys(icons-generated.$sprites);

/// List of svg elements so we don't have to type them all out multiple times.
///
/// @content Pass in your custom states to be wrapped by SVG elements
///
/// @example scss - Add currentColor to all SVG elements
///   .thing {
///     @include elements() {
///       color: currentColor;
///     }
///   }
@mixin elements() {
  svg,
  g,
  circle,
  ellipse,
  line,
  path,
  polygon,
  polyline,
  rect,
  text {
    @content;
  }
}

// Set svg elements to current color.
.svg--colorable {
  @include elements() {
    color: currentColor;
    fill: currentColor;
  }
}

// Defaults for .svg--icon generated CSS
.svg--icon {
  display: inline-block;
  width: sass.functions-rem-calc(40px);

  svg {
    display: block;
    width: rem-calc(300px);
    max-width: 100%;
    max-height: sass.functions-rem-calc(300px);
    height: auto;
  }

  // Set svgicon elements to current color.
  @include elements() {
    color: currentColor;
    fill: currentColor;
  }
}

// Loop over every custom-generated SVG and create a CSS class for it
@each $icon in $svgicons {
  .icon--#{$icon} {
    @include icons-generated.sprite(#{$icon});
    display: inline-block;
    height: sass.functions-rem-calc(40px);
    width: sass.functions-rem-calc(40px);
  }
}

// Loop over every theme-color and create a CSS class to colorize it
@each $color in map.keys(sass.$bs-theme-colors) {
  .color-fill--#{$color} {
    color: sass.bs-theme-color(#{$color});
  }

  .color-stroke--#{$color} {
    color: sass.bs-theme-color(#{$color});
    svg {
      stroke: currentColor;
      fill: none;
    }
  }
}
